% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Bliss_Simulate_Data.R
\name{sim}
\alias{sim}
\title{sim}
\usage{
sim(param)
}
\arguments{
\item{param}{a list containing :
\describe{
 \item{n}{an integer, the number of functions.}
 \item{p}{an integer, the number of observation times.}
 \item{b_inf}{a numerical value, the lower boundary of the support. (optional)}
 \item{b_sup}{a numerical value, the upper boundary of the support. (optional)}
 \item{mu}{a numerical value, the intercept of the model. (optional)}
 \item{r}{a nonnegative value, the signal to noise ratio. (optional)}
 \item{link}{a function, the link function to simulate data from a GFLM. (optional)}
 \item{grid}{a numerical vector, the grid of observation points.}
 \item{beta_type}{a character vector. It indicates the shape of the coefficient function. (optional)}
 \item{x_type}{a character vector. It indicates the shape of the functions x_i(t). (optional)}
 \item{dim}{a numerical value, the dimension of the Fourier basis, if "type" is "Fourier" or "Fourier2". (optional)}
 \item{ksi}{a numerical value which is a "coefficient of correlation", see the Bliss article Section 3.1 for more details.}
 \item{diagVar}{a numerical vector, the diagonal of the autocorrelation matrix of the functions x_i(t).}
}}
}
\value{
a list containing :
\describe{
 \item{y}{a numerical vector, the outcomes y_i.}
 \item{x}{a numerical vector, the functional covariates on a grid of times points (grid).}
 \item{beta_function}{a numerical vector, the coefficient function on a grid of times points (grid).}
 \item{grid}{a numerical vector, which is the grid of observation points.}
}
}
\description{
simulate a dataset for the functional linear model.
}
\examples{
library(RColorBrewer)
## Dataset 1
param <- list(n=50,p=100,beta_type="smooth")
data <- sim(param)
cols <- colorRampPalette(brewer.pal(9,"YlOrRd"))(50)
par(mfrow=c(2,1))
matplot(data$grid,t(data$x),type="l",lty=1,col=cols)
plot(data$grid,data$beta_function,type="l")
abline(h=0,lty=2,col="gray")
par(mfrow=c(1,1))
## Dataset 2
param <- list(n=10,p=200,beta_type="simple",b_inf=-2.12,b_sup=3.14)
data <- sim(param)
cols <- colorRampPalette(brewer.pal(9,"YlOrRd"))(10)
par(mfrow=c(2,1))
matplot(data$grid,t(data$x),type="l",lty=1,col=cols)
plot(data$grid,data$beta_function,type="l")
abline(h=0,lty=2,col="gray")
par(mfrow=c(1,1))
}
